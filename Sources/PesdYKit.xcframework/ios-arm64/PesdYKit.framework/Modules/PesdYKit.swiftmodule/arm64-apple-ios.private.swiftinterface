// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
// swift-module-flags: -target arm64-apple-ios16.2 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name PesdYKit
// swift-module-flags-ignorable: -enable-bare-slash-regex
import MetalKit
@_exported import PesdYKit
import SceneKit
import Swift
import _Concurrency
import _StringProcessing
@_hasMissingDesignatedInitializers public class MetalDevice {
  public static let shared: PesdYKit.MetalDevice
  final public let device: any Metal.MTLDevice
  final public let commandQueue: any Metal.MTLCommandQueue
  public var videoTextureCache: CoreVideo.CVMetalTextureCache?
  @objc deinit
  final public func newCommandBuffer() -> any Metal.MTLCommandBuffer
  final public class func renderPipe(vertexFunctionName: Swift.String = "vertexShader", fragmentFunctionName: Swift.String, pixelFormat: Metal.MTLPixelFormat) throws -> any Metal.MTLRenderPipelineState
  final public class func texture(_ size: CoreFoundation.CGSize) -> (any Metal.MTLTexture)?
  final public class func textureA(_ width: Swift.Int, _ height: Swift.Int) -> (any Metal.MTLTexture)?
  final public class func filerTexture(_ width: Swift.Int, _ height: Swift.Int) -> (any Metal.MTLTexture)?
  final public class func vertexBuffer() -> (any Metal.MTLBuffer)?
  final public class func faceBuffer(faceFloats: [simd.float2]) -> (any Metal.MTLBuffer)?
  final public let index_data: [Swift.UInt16]
  final public func renderPipe(vertexFunctionName: Swift.String = "vertexShader", fragmentFunctionName: Swift.String, pixelFormat: Metal.MTLPixelFormat) throws -> any Metal.MTLRenderPipelineState
  final public class func faceIndexBuffer(faceFloats: [simd.float2]) -> (any Metal.MTLBuffer)?
  final public func cVTexture(buffer: CoreVideo.CVPixelBuffer!) -> (any Metal.MTLTexture)?
  final public func ciTexture(_ img: CoreImage.CIImage?, size: CoreFoundation.CGSize) -> (any Metal.MTLTexture)?
  final public func ciTextures(_ imgs: [CoreImage.CIImage], size: CoreFoundation.CGSize, commandBuff: any Metal.MTLCommandBuffer) -> (any Metal.MTLTexture)?
  final public class func scnTexture(_ size: CoreFoundation.CGSize) -> any Metal.MTLTexture
  final public class func sceneToTexture(in scnView: SceneKit.SCNView, _ commandBuffer: any Metal.MTLCommandBuffer, texture: inout any Metal.MTLTexture, time: CoreFoundation.CFTimeInterval)
  final public func computeState(compStr: Swift.String) -> (any Metal.MTLComputePipelineState)!
  final public func dstTexture(buffer: CoreVideo.CVPixelBuffer!) -> (any Metal.MTLTexture)?
}
extension Swift.SIMD2 where Scalar == Swift.Float {
  public func convertCoord() -> simd.float2
}
